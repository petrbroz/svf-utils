/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Manifest {
  /**
   * Globally unique identifier for the manifest.
   */
  guid: string;
  /**
   * Identifier for the owner of the manifest.
   */
  owner?: string;
  /**
   * Indicates whether a thumbnail is available.
   */
  hasThumbnail: "true" | "false";
  /**
   * Start time for the manifest processing.
   */
  startedAt?: string;
  /**
   * Type of the manifest, e.g., 'design'.
   */
  type: string;
  /**
   * Unique resource identifier for the manifest.
   */
  urn: string;
  /**
   * Processing success percentage, e.g., '100%'.
   */
  success: string;
  /**
   * Processing progress, e.g., 'complete'.
   */
  progress: string;
  /**
   * Region where the processing occurred.
   */
  region?: string;
  /**
   * Overall status of the manifest, e.g., 'success'.
   */
  status: string;
  /**
   * Map of command IDs to related keys.
   */
  registerKeys?: {
    [k: string]: string[];
  };
  /**
   * Nested structure containing children elements.
   */
  children: Child[];
  [k: string]: unknown;
}
export interface Child {
  /**
   * Globally unique identifier for the child.
   */
  guid: string;
  /**
   * Role of the child, e.g., 'viewable'.
   */
  role?: string;
  /**
   * Indicates whether a thumbnail is available.
   */
  hasThumbnail?: "true" | "false";
  /**
   * Processing progress, e.g., 'complete'.
   */
  progress?: string;
  /**
   * Type of the child, e.g., 'folder'.
   */
  type: string;
  /**
   * Overall status of the child, e.g., 'success'.
   */
  status?: string;
  /**
   * Version of the child element.
   */
  version?: string;
  /**
   * Unique resource identifier for the child.
   */
  urn?: string;
  /**
   * Size of the input file in bytes.
   */
  inputFileSize?: number;
  /**
   * Type of the input file, e.g., 'rvt'.
   */
  inputFileType?: string;
  /**
   * Name of the child element.
   */
  name?: string;
  /**
   * Properties associated with the child.
   */
  properties?: {
    [k: string]: unknown;
  };
  otg_manifest?: OTGManifest;
  /**
   * Nested children elements.
   */
  children?: Child[];
  [k: string]: unknown;
}
/**
 * OTG manifest information for the child.
 */
export interface OTGManifest {
  version?: number;
  creator?: string;
  first_started_at?: string;
  last_started_at?: string;
  last_modified_at?: string;
  invocations?: number;
  status?: string;
  success?: string;
  progress?: string;
  urn?: string;
  pdb_manifest?: PDBManifest;
  views: {
    [k: string]: View;
  };
  account_id?: string;
  paths: Paths;
  [k: string]: unknown;
}
export interface PDBManifest {
  pdb_version_rel_path?: string;
  pdb_shared_rel_path?: string;
  assets?: Asset[];
  [k: string]: unknown;
}
export interface Asset {
  uri?: string;
  tag?: string;
  type?: string;
  isShared?: boolean;
  [k: string]: unknown;
}
export interface View {
  role: string;
  mime: string;
  urn: string;
  [k: string]: unknown;
}
export interface Paths {
  version_root: string;
  shared_root: string;
  global_root: string;
  global_sharding: number;
  region: string;
  [k: string]: unknown;
}
